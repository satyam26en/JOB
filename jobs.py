# -*- coding: utf-8 -*-
"""JOBS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ocCrnWgsw4uenpj0s7iq0dUw9fgevL3L
"""

import streamlit as st
import pandas as pd
import plotly.express as px

st.title("Job Data Analysis Dashboard")

st.header("Part 1: Average Ratings and Reviews by Company")

# Load the dataset
file_url = "https://raw.githubusercontent.com/satyam26en/JOB/main/Clean_Job_File.csv"
df = pd.read_csv(file_url)

# Function to generate the first plot
def plot_average_ratings_reviews(df):
    average_ratings_reviews = df.groupby('company').agg({'rating': 'mean', 'reviews': 'sum'}).reset_index()
    average_ratings_reviews.columns = ['company', 'average_rating', 'total_reviews']
    min_reviews = 1000
    filtered_ratings_reviews = average_ratings_reviews[average_ratings_reviews['total_reviews'] >= min_reviews]
    filtered_ratings_reviews = filtered_ratings_reviews.sort_values(by='average_rating', ascending=False)
    top_10_ratings = {
        "0-2 Stars": filtered_ratings_reviews.query("average_rating <= 2").head(10),
        "2-3.5 Stars": filtered_ratings_reviews.query("average_rating > 2 and average_rating <= 3.5").head(10),
        "3.5-4.5 Stars": filtered_ratings_reviews.query("average_rating > 3.5 and average_rating <= 4.5").head(10),
        "> 4.5 Stars": filtered_ratings_reviews.query("average_rating > 4.5").head(10),
        "All Ratings": filtered_ratings_reviews.head(10)
    }
    fig = px.bar(top_10_ratings["All Ratings"], x='company', y='average_rating', title='Top 10 Companies by Average Ratings and Reviews', hover_data={'total_reviews': True})
    filters = [
        dict(
            args=[{"x": [top_10_ratings["0-2 Stars"]['company']], "y": [top_10_ratings["0-2 Stars"]['average_rating']], "hover_data": {'total_reviews': True}}],
            label="0-2 Stars",
            method="restyle"
        ),
        dict(
            args=[{"x": [top_10_ratings["2-3.5 Stars"]['company']], "y": [top_10_ratings["2-3.5 Stars"]['average_rating']], "hover_data": {'total_reviews': True}}],
            label="2-3.5 Stars",
            method="restyle"
        ),
        dict(
            args=[{"x": [top_10_ratings["3.5-4.5 Stars"]['company']], "y": [top_10_ratings["3.5-4.5 Stars"]['average_rating']], "hover_data": {'total_reviews': True}}],
            label="3.5-4.5 Stars",
            method="restyle"
        ),
        dict(
            args=[{"x": [top_10_ratings["> 4.5 Stars"]['company']], "y": [top_10_ratings["> 4.5 Stars"]['average_rating']], "hover_data": {'total_reviews': True}}],
            label="> 4.5 Stars",
            method="restyle"
        ),
        dict(
            args=[{"x": [top_10_ratings["All Ratings"]['company']], "y": [top_10_ratings["All Ratings"]['average_rating']], "hover_data": {'total_reviews': True}}],
            label="All Ratings",
            method="restyle"
        )
    ]
    fig.update_layout(
        title={
            'text': 'Top 10 Companies by Average Ratings and Reviews',
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        updatemenus=[
            dict(
                buttons=filters,
                direction="down",
                pad={"r": 10, "t": 10},
                showactive=True,
                x=1,
                xanchor="right",
                y=1.15,
                yanchor="top",
                bgcolor='rgba(255, 255, 255, 0.8)',
                bordercolor='black',
                borderwidth=1
            ),
        ]
    )
    return fig

fig1 = plot_average_ratings_reviews(df)
st.plotly_chart(fig1)


st.header("Part 2: Number of Job Postings per Company")

# Function to generate the second plot
def plot_job_postings_per_company(df):
    company_job_counts = df['company'].value_counts().reset_index()
    company_job_counts.columns = ['company', 'job_postings']

    fig = px.bar(company_job_counts, x='company', y='job_postings', title='Number of Job Postings per Company', labels={'job_postings': 'Number of Job Postings', 'company': 'Company'})

    # Customize the layout for better visibility
    fig.update_layout(
        title={
            'text': 'Number of Job Postings per Company',
            'y':0.9,
            'x':0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        title_font_size=24,
        xaxis_title_font_size=20,
        yaxis_title_font_size=20,
        legend_title_text='Company Ranking',
        legend_title_font_size=20,
        legend_font_size=16,
        legend=dict(
            x=0,
            y=1,
            xanchor='left',
            yanchor='top'
        ),
        updatemenus=[
            dict(
                buttons=list([
                    dict(
                        args=[{"y": [company_job_counts['job_postings'][:10]]}],
                        label="Top 10 Companies",
                        method="restyle"
                    ),
                    dict(
                        args=[{"y": [company_job_counts['job_postings'][-10:]]}],
                        label="Bottom 10 Companies",
                        method="restyle"
                    ),
                    dict(
                        args=[{"y": [company_job_counts['job_postings']]}],
                        label="All Companies",
                        method="restyle"
                    )
                ]),
                direction="down",
                pad={"r": 10, "t": 10},
                showactive=True,
                x=1,
                xanchor="right",
                y=1.15,
                yanchor="top",
                bgcolor='rgba(255, 255, 255, 0.8)',
                bordercolor='black',
                borderwidth=1
            ),
        ]
    )

    # Add interactive legend
    fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')),
                    selector=dict(type='bar'))

    return fig

fig2 = plot_job_postings_per_company(df)
st.plotly_chart(fig2)